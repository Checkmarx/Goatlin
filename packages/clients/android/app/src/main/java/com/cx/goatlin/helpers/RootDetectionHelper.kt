package com.cx.vulnerablekotlinapp.helpers

import android.content.Context
import android.content.pm.PackageManager
import android.os.Build
import java.io.*

class RootDetectionHelper {
    companion object {
        fun check (ctx: Context): Boolean {

            if (isInDevMode()) {
                return false
            }

            return detectDeveloperBuild() or
                    detectOTACertificates() or
                    detectRootedAPKs(ctx) or
                    detectForSUBinaries() or
                    attemptSUCommand()
        }

        /**
         * Checks whether build.prop `ro.build.tags` includes the value "test-keys".
         * "test-keys" generally means the kernel was signed with a custom key generated by a
         * third-party developer.
         */
        private fun detectDeveloperBuild (): Boolean {
            val buildTags: String = Build.TAGS

            return buildTags.contains("test-keys")
        }

        /**
         * Check whether `/etc/security/otacerts.zip` file exists
         *
         */
        private fun detectOTACertificates (): Boolean {
            val otaCerts: File = File("/etc/security/otacerts.zip")

            return otaCerts.exists()
        }

        /**
         * Check if some of the most common packages to gain root access are installed
         */
        private fun detectRootedAPKs (ctx: Context): Boolean {
            val knownRootedAPKs: Array<String> = arrayOf(
                "com.noshufou.android.su",
                "com.thirdparty.superuser",
                "eu.chainfire.supersu",
                "com.koushikdutta.superuser",
                "com.zachspong.temprootremovejb",
                "com.ramdroid.appquarantine"
            )
            val pm: PackageManager = ctx.packageManager

            for(uri in knownRootedAPKs) {
                try {
                    pm.getPackageInfo(uri, PackageManager.GET_ACTIVITIES)
                    return true
                } catch (e: PackageManager.NameNotFoundException) {
                    // application is not installed
                }
            }

            return false
        }

        /**
         * Check if `su` binary is available on some common binary path
         */
        private fun detectForSUBinaries (): Boolean {
            var suBinaries: Array<String> = arrayOf(
                "/system/bin/su",
                "/system/xbin/su",
                "/sbin/su",
                "/system/su",
                "/system/bin/.ext/.su",
                "/system/usr/we-need-root/su-backup",
                "/system/xbin/mu"
            )

            for (bin in suBinaries) {
                if (File(bin).exists()) {
                    return true
                }
            }

            return false
        }

        /**
         * Tries to run `su` binary followed by `id` to check if the current user contains "(root)".
         */
        private fun attemptSUCommand (): Boolean {
            var idOutput: String = ""

            try {
                val proc = ProcessBuilder("su")
                        .redirectError(ProcessBuilder.Redirect.PIPE)
                        .start()

                val outputStream = BufferedOutputStream(proc.outputStream)
                val inputStream = BufferedInputStream(proc.inputStream)

                outputStream.write("id\n".toByteArray(Charsets.UTF_8))
                outputStream.flush()

                val idOutput = inputStream.bufferedReader().readLine()

                outputStream.write("exit\n".toByteArray(Charsets.UTF_8));
                outputStream.flush();

                outputStream.close()
                inputStream.close()
            } catch (e: Exception) {
                // silently do nothing
            }

            return idOutput.contains("(root)")
        }

        /**
         * Whether application is in development
         */
        private fun isInDevMode (): Boolean {
            val buildTags: String = Build.TAGS

            return buildTags.contains("dev-keys")
        }
    }
}